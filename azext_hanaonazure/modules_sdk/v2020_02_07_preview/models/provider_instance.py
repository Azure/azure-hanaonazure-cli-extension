# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .proxy_resource import ProxyResource


class ProviderInstance(ProxyResource):
    """A provider instance associated with a SAP monitor.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Network/trafficManagerProfiles.
    :vartype type: str
    :param provider_instance_type: The type of provider instance.
    :type provider_instance_type: str
    :param properties: A JSON string containing the properties of the provider
     instance.
    :type properties: str
    :param metadata: A JSON string containing metadata of the provider
     instance.
    :type metadata: str
    :ivar provisioning_state: State of provisioning of the provider instance.
     Possible values include: 'Accepted', 'Creating', 'Updating', 'Failed',
     'Succeeded', 'Deleting', 'Migrating'
    :vartype provisioning_state: str or :class:`HanaProvisioningStatesEnum
     <azure.mgmt.saphanaonazure.models.HanaProvisioningStatesEnum>`
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'provider_instance_type': {'key': 'properties.type', 'type': 'str'},
        'properties': {'key': 'properties.properties', 'type': 'str'},
        'metadata': {'key': 'properties.metadata', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(self, provider_instance_type=None, properties=None, metadata=None):
        super(ProviderInstance, self).__init__()
        self.provider_instance_type = provider_instance_type
        self.properties = properties
        self.metadata = metadata
        self.provisioning_state = None
